//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using Domain.Users;
using Microsoft.EntityFrameworkCore;

namespace SqlAdapter
{
    using System;
    using Domain;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    using Application;
    
    
    public class EventStoreRepository : IEventStoreRepository
    {
        
        public EventStoreContext Context { get; private set; }
        public HangfireContext HangfireContext { get; }

        public EventStoreRepository(EventStoreContext Context, HangfireContext hangfireContext)
        {
            this.Context = Context;
            HangfireContext = hangfireContext;
        }
        
        public async Task AddEvents(List<DomainEventBase> domainEvents)
        {
            await Context.EventHistory.AddRangeAsync(domainEvents);
            await HangfireContext.EventQueue.AddRangeAsync(domainEvents);
            await Context.SaveChangesAsync();
            await HangfireContext.SaveChangesAsync();
        }

        public async Task<List<DomainEventBase>> GetEventsInQueue<T>()
        {
            var events = await HangfireContext.EventQueue.Where(eve => eve.GetType() == typeof(T)).ToListAsync();
            return events;
        }

        public async Task RemoveEventsFromQueue(List<DomainEventBase> events)
        {
            HangfireContext.EventQueue.RemoveRange(events);
            await HangfireContext.SaveChangesAsync();
        }
    }
}
