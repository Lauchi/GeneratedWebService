//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Domain.Posts;

namespace Application.Users.AsyncHooks
{
    using Domain.Queries;
    using Application;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    using Domain.Users;
    
    
    public class OnUserCreateCreateQuery
    {
        
        public OnUserCreateCreateQueryAsyncHook AsyncHook { get; private set; }
        
        public IHangfireQueue HangfireQueue { get; private set; }
        
        public IUserRepository UserRepository { get; private set; }
        
        public OnUserCreateCreateQuery(OnUserCreateCreateQueryAsyncHook AsyncHook, IHangfireQueue HangfireQueue, IUserRepository UserRepository)
        {
            this.AsyncHook = AsyncHook;
            this.HangfireQueue = HangfireQueue;
            this.UserRepository = UserRepository;
        }
        
        public async Task Run()
        {
            var events = await HangfireQueue.GetEvents("OnUserCreateCreateQuery");
            var handledEvents = new List<EventAndJob>();
            var enumerator = events.GetEnumerator();
            for (
            ; enumerator.MoveNext(); 
            )
            {
                var eventWrapper = enumerator.Current;
                var domainEvent = (UserCreateEvent) eventWrapper.DomainEvent;
                var entity = await UserRepository.GetUser(domainEvent.Id);
                var newCreateEvent = new UserCreateEvent(entity, domainEvent.EntityId);
                var hookResult = await AsyncHook.Execute(newCreateEvent);
                if (hookResult.Ok)
                {
                    handledEvents.Add(eventWrapper);
                }
            }
            await HangfireQueue.RemoveEventsFromQueue(handledEvents);
        }
    }

    public class OnUserCreateCreateQueryAsyncHook
    {
        private readonly IQueryRepo _queryRepo;

        public OnUserCreateCreateQueryAsyncHook(IQueryRepo queryRepo)
        {
            _queryRepo = queryRepo;
        }

        public async Task<HookResult> Execute(UserCreateEvent domainEvent)
        {
            var userWithPostNumberQuery = UserWithPostNumberQuery.Create(domainEvent);
            await _queryRepo.Create(userWithPostNumberQuery);
            return await Task.FromResult(HookResult.OkResult());
        }

        public async Task<HookResult> Execute(PostUpdateTitleEvent domainEvent)
        {
            var withPostNumberQuery = await _queryRepo.Load(domainEvent);
            foreach (var numberQuery in withPostNumberQuery)
            {
                numberQuery.Apply(domainEvent);
                await _queryRepo.Update(numberQuery);
            }

            return await Task.FromResult(HookResult.OkResult());
        }

        public async Task<HookResult> Execute(UserUpdateNameEvent domainEvent)
        {
            var withPostNumberQuery = await _queryRepo.Load(domainEvent);
            foreach (var numberQuery in withPostNumberQuery)
            {
                numberQuery.Apply(domainEvent);
                await _queryRepo.Update(numberQuery);
            }

            return await Task.FromResult(HookResult.OkResult());
        }
    }

    public interface IQueryRepo
    {
        Task<List<UserWithPostNumberQuery>> Load(PostUpdateTitleEvent userWithPostNumberQuery);
        Task<List<UserWithPostNumberQuery>> Load(UserUpdateNameEvent userWithPostNumberQuery);
        Task Update(UserWithPostNumberQuery withPostNumberQuery);
        Task Create(UserWithPostNumberQuery userWithPostNumberQuery);
    }
}
